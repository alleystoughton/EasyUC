(* UC__KeyExchange.eca *)

(* Model for the machine-generated code for the KeyExchange real
   and ideal functionalities and simulator, which need to be
   cloned as a unit

   Should be required and clone included in UC_KeyExchange.eca, which
   the user writes *)

require UC_Forwarding.  (* from uc_requires *)

require import KeysExponentsAndPlaintexts.  (* from ec_requires *)

require import UCBasicTypes.  (* always last *)

(* the port indices of the adversary the real functionality or its
   subfunctionalities communicate with, as well as the port index of
   the simulator the ideal functionality communicates with, are all
   distinct and in the range _adv_pi_begin, ..., _adv_pi_begin +
   _adv_pi_num - 1 *)

op _adv_pi_num : int = 3.

(* begin theory parameters *)

op _adv_pi_begin : int.

axiom adv_pi_gt0 : 0 < _adv_pi_begin.

(* end theory parameters *)

(* port indices of adversary that the two forwarding functionalities
   cloned by the real functionality use *)

op _adv_fw1_pi : int = _adv_pi_begin + 0.
op _adv_fw2_pi : int = _adv_pi_begin + 1.

(* port index of key exchange simulator *)

op _ke_sim_pi : int = _adv_pi_begin + 2.

theory UC__RF.

clone UC_Forwarding as UC_Fw1 with
  op _adv_pi <- _adv_fw1_pi
proof *.
realize adv_pi_gt0. smt(adv_pi_gt0). qed.

clone UC_Forwarding as UC_Fw2 with
  op _adv_pi <- _adv_fw2_pi
proof *.
realize adv_pi_gt0. smt(adv_pi_gt0). qed.

end UC__RF.

(* basic direct interface for Party 1 *)

theory UC_KEDirPt1.

(* begin theory parameters *)

op pi : int.

(* end theory parameters *)

(* input message: request from pt1, initiating the first round of
   key-exchange, asking to agree a key with pt2

   pt1 and pt2 are the names used in the UC DSL declaration of
   ke_req1; note the extra "_" in ke_req1__func, to avoid a possible
   conflict with legal UC DSL identifers *)

type ke_req1 =
  {ke_req1__func : addr;   (* address of functionality - destination address *)
   ke_req1_pt1   : port;   (* port requesting key exchange - source port *)
   (* data: *)
   ke_req1_pt2   : port}.  (* port to agree a key with *)

op enc_ke_req1 (x : ke_req1) : msg =
  (Dir, (x.`ke_req1__func, pi), x.`ke_req1_pt1,
   0,  (* no messages from which this must be distinct *)
   epdp_port_univ.`enc x.`ke_req1_pt2).

op nosmt dec_ke_req1 (m : msg) : ke_req1 option =
  let (mod, pt1, pt2, tag, v) = m
  in (mod = Adv \/ pt1.`2 <> pi \/ tag <> 0) ?
     None :
     match epdp_port_univ.`dec v with
     | None      => None
     | Some pt2' =>
         Some
         {|ke_req1__func = pt1.`1; ke_req1_pt1 = pt2;
           ke_req1_pt2 = pt2'|}
     end.

op epdp_ke_req1_msg = {|enc = enc_ke_req1; dec = dec_ke_req1|}.

lemma valid_epdp_ke_req1_msg : valid_epdp epdp_ke_req1_msg.
proof.
apply epdp_intro.
move => x.
rewrite /epdp_ke_req1_msg /= /dec_ke_req1 /enc_ke_req1 /=
        !(epdp, epdp_sub) /=.
by case x.
move => [mod pt1 pt2 tag u] v.
rewrite /epdp_ke_req1_msg /dec_ke_req1 /enc_ke_req1 /=.
case (mod = Adv \/ pt1.`2 <> pi \/ tag <> 0) => //.
rewrite !negb_or /= not_adv => [#] -> pt1_2 -> match_eq_some /=.
have val_u :
  epdp_port_univ.`dec u = Some (v.`ke_req1_pt2).
  move : match_eq_some.
  case (epdp_port_univ.`dec u) => //.
move : match_eq_some.
rewrite val_u /= => <- /=.
split; first move : pt1_2; by case pt1.
by rewrite (epdp_dec_enc _ _ u).
qed.

hint simplify [eqtrue] valid_epdp_ke_req1_msg.
hint rewrite epdp : valid_epdp_ke_req1_msg.

lemma eq_of_valid_ke_req1 (m : msg) :
  is_valid epdp_ke_req1_msg m =>
  m =
  let x = oget (epdp_ke_req1_msg.`dec m) in
  (Dir,
   (x.`ke_req1__func, pi),
   x.`ke_req1_pt1,
   0,
   epdp_port_univ.`enc x.`ke_req1_pt2).
proof.
rewrite /is_valid.
move => val_m.
have [] x : exists (x : ke_req1), epdp_ke_req1_msg.`dec m = Some x.
  exists (oget (dec_ke_req1 m)); by rewrite -some_oget.
case x => x1 x2 x3.
move => /(epdp_dec_enc _ _ _ valid_epdp_ke_req1_msg) <-.
by rewrite !epdp.
qed.

(* output message: response to pt1, ending the second round of
   key-exchange

   pt1 and pt2 are the names used in the UC DSL declaration of
   fw_req; note the extra "_" in fw_req__func, to avoid a possible
   conflict with legal UC DSL identifers *)

type ke_rsp2 =
  {ke_rsp2__func : addr;   (* address of functionality - source address *)
   ke_rsp2_pt1   : port;   (* port requesting key exchange - destination port *)
   (* data: *)
   ke_rsp2_pt2   : port}.  (* port to agree a key with *)

op enc_ke_rsp2 (x : ke_rsp2) : msg =
  (Dir, x.`ke_rsp2_pt1, (x.`ke_rsp2__func, pi),
   0,  (* no messages from which this must be distinct *)
   epdp_port_univ.`enc x.`ke_rsp2_pt2).

op nosmt dec_ke_rsp2 (m : msg) : ke_rsp2 option =
  let (mod, pt1, pt2, tag, v) = m
  in (mod = Adv \/ pt2.`2 <> pi \/ tag <> 0) ?
     None :
     match epdp_port_univ.`dec v with
     | None      => None
     | Some pt2' =>
         Some
         {|ke_rsp2__func = pt2.`1; ke_rsp2_pt1 = pt1;
           ke_rsp2_pt2 = pt2'|}
     end.

op epdp_ke_rsp2_msg = {|enc = enc_ke_rsp2; dec = dec_ke_rsp2|}.

lemma valid_epdp_ke_rsp2_msg : valid_epdp epdp_ke_rsp2_msg.
proof.
apply epdp_intro.
move => x.
rewrite /epdp_ke_rsp2_msg /= /dec_ke_rsp2 /enc_ke_rsp2 /=
        !(epdp, epdp_sub) /=.
by case x.
move => [mod pt1 pt2 tag u] v.
rewrite /epdp_ke_rsp2_msg /dec_ke_rsp2 /enc_ke_rsp2 /=.
case (mod = Adv \/ pt2.`2 <> pi \/ tag <> 0) => //.
rewrite !negb_or /= not_adv => [#] -> pt2_2 -> match_eq_some /=.
have val_u :
  epdp_port_univ.`dec u = Some (v.`ke_rsp2_pt2).
  move : match_eq_some.
  case (epdp_port_univ.`dec u) => //.
move : match_eq_some.
rewrite val_u /= => <- /=.
split; first move : pt2_2; by case pt2.
by rewrite (epdp_dec_enc _ _ u).
qed.

hint simplify [eqtrue] valid_epdp_ke_rsp2_msg.
hint rewrite epdp : valid_epdp_ke_rsp2_msg.

lemma eq_of_valid_ke_rsp2 (m : msg) :
  is_valid epdp_ke_rsp2_msg m =>
  m =
  let x = oget (epdp_ke_rsp2_msg.`dec m) in
  (Dir,
   x.`ke_rsp2_pt1,
   (x.`ke_rsp2__func, pi),
   0,
   epdp_port_univ.`enc x.`ke_rsp2_pt2).
proof.
rewrite /is_valid.
move => val_m.
have [] x : exists (x : ke_rsp2), epdp_ke_rsp2_msg.`dec m = Some x.
  exists (oget (dec_ke_rsp2 m)); by rewrite -some_oget.
case x => x1 x2 x3.
move => /(epdp_dec_enc _ _ _ valid_epdp_ke_rsp2_msg) <-.
by rewrite !epdp.
qed.

end UC_KEDirPt1.

(* basic direct interface for Party 1 *)

theory UC_KEDirPt2.

(* begin theory parameters *)

op pi : int.

(* end theory parameters *)

(* input message: request from pt2, initiating the second round of
   key-exchange

   pt2 is the name used in the UC DSL declaration of ke_req1; note
   the extra "_" in ke_req1__func, to avoid a possible conflict with
   legal UC DSL identifers *)

type ke_req2 =
  {ke_req2__func : addr;   (* address of functionality - destination address *)
   ke_req2_pt2   : port}.  (* port requesting key exchange - source port *)
   (* data: none *)

op enc_ke_req2 (x : ke_req2) : msg =
  (Dir, (x.`ke_req2__func, pi), x.`ke_req2_pt2,
   0,  (* no messages from which this must be distinct *)
   epdp_unit_univ.`enc ()).

op nosmt dec_ke_req2 (m : msg) : ke_req2 option =
  let (mod, pt1, pt2, tag, v) = m
  in (mod = Adv \/ pt1.`2 <> pi \/ tag <> 0) ?
     None :
     match epdp_unit_univ.`dec v with
     | None   => None
     | Some _ =>
         Some {|ke_req2__func = pt1.`1; ke_req2_pt2 = pt2|}
     end.

op epdp_ke_req2_msg = {|enc = enc_ke_req2; dec = dec_ke_req2|}.

lemma valid_epdp_ke_req2_msg : valid_epdp epdp_ke_req2_msg.
proof.
apply epdp_intro.
move => x.
rewrite /epdp_ke_req2_msg /= /dec_ke_req2 /enc_ke_req2 /=
        !(epdp, epdp_sub) /=.
by case x.
move => [mod pt1 pt2 tag u] v.
rewrite /epdp_ke_req2_msg /dec_ke_req2 /enc_ke_req2 /=.
case (mod = Adv \/ pt1.`2 <> pi \/ tag <> 0) => //.
rewrite !negb_or /= not_adv => [#] -> pt1_2 -> match_eq_some /=.
have val_u :
  epdp_unit_univ.`dec u = Some ().
  move : match_eq_some.
  case (epdp_unit_univ.`dec u) => //.
move : match_eq_some.
rewrite val_u /= => <- /=.
split; first move : pt1_2; by case pt1.
by rewrite (epdp_dec_enc _ _ u).
qed.

hint simplify [eqtrue] valid_epdp_ke_req2_msg.
hint rewrite epdp : valid_epdp_ke_req2_msg.

lemma eq_of_valid_ke_req2 (m : msg) :
  is_valid epdp_ke_req2_msg m =>
  m =
  let x = oget (epdp_ke_req2_msg.`dec m) in
  (Dir,
   (x.`ke_req2__func, pi),
   x.`ke_req2_pt2,
   0,
   epdp_unit_univ.`enc ()).
proof.
rewrite /is_valid.
move => val_m.
have [] x : exists (x : ke_req2), epdp_ke_req2_msg.`dec m = Some x.
  exists (oget (dec_ke_req2 m)); by rewrite -some_oget.
case x => x1 x2.
move => /(epdp_dec_enc _ _ _ valid_epdp_ke_req2_msg) <-.
by rewrite !epdp.
qed.

(* output message: response to pt2, ending the first round of
   key-exchange

   pt1, pt2 and k are the names used in the UC DSL declaration of
   fw_req; note the extra "_" in fw_req__func, to avoid a possible
   conflict with legal UC DSL identifers *)

type ke_rsp1 =
  {ke_rsp1__func : addr;   (* address of functionality - source address *)
   ke_rsp1_pt2   : port;   (* port key exchanged with - destination port *)
   (* data: *)
   ke_rsp1_pt1   : port;   (* port requesting key exchange *)
   ke_rsp1_k     : key}.   (* key being exchanged *)

op enc_ke_rsp1 (x : ke_rsp1) : msg =
  (Dir, x.`ke_rsp1_pt2, (x.`ke_rsp1__func, pi),
   0,  (* no messages from which this must be distinct *)
   (epdp_pair_univ epdp_port_univ epdp_key_univ).`enc
    (x.`ke_rsp1_pt1, x.`ke_rsp1_k)).

op nosmt dec_ke_rsp1 (m : msg) : ke_rsp1 option =
  let (mod, pt1, pt2, tag, v) = m
  in (mod = Adv \/ pt2.`2 <> pi \/ tag <> 0) ?
     None :
     match (epdp_pair_univ epdp_port_univ epdp_key_univ).`dec v with
     | None      => None
     | Some p =>
         Some
         {|ke_rsp1__func = pt2.`1; ke_rsp1_pt2 = pt1;
           ke_rsp1_pt1 = p.`1; ke_rsp1_k = p.`2|}
     end.

op epdp_ke_rsp1_msg = {|enc = enc_ke_rsp1; dec = dec_ke_rsp1|}.

lemma valid_epdp_ke_rsp1_msg : valid_epdp epdp_ke_rsp1_msg.
proof.
apply epdp_intro.
move => x.
rewrite /epdp_ke_rsp1_msg /= /dec_ke_rsp1 /enc_ke_rsp1 /=
        !(epdp, epdp_sub) /=.
by case x.
move => [mod pt1 pt2 tag u] v.
rewrite /epdp_ke_rsp1_msg /dec_ke_rsp1 /enc_ke_rsp1 /=.
case (mod = Adv \/ pt2.`2 <> pi \/ tag <> 0) => //.
rewrite !negb_or /= not_adv => [#] -> pt2_2 -> match_eq_some /=.
have val_u :
  (epdp_pair_univ epdp_port_univ epdp_key_univ).`dec u =
  Some (v.`ke_rsp1_pt1, v.`ke_rsp1_k).
  move : match_eq_some.
  case ((epdp_pair_univ epdp_port_univ epdp_key_univ).`dec u) => //.
  by case.
move : match_eq_some.
rewrite val_u /= => <- /=.
split; first move : pt2_2; by case pt2.
by rewrite (epdp_dec_enc _ _ u) 1:!(epdp, epdp_sub).
qed.

hint simplify [eqtrue] valid_epdp_ke_rsp1_msg.
hint rewrite epdp : valid_epdp_ke_rsp1_msg.

lemma eq_of_valid_ke_rsp1 (m : msg) :
  is_valid epdp_ke_rsp1_msg m =>
  m =
  let x = oget (epdp_ke_rsp1_msg.`dec m) in
  (Dir,
   x.`ke_rsp1_pt2,
   (x.`ke_rsp1__func, pi),
   0,
   (epdp_pair_univ epdp_port_univ epdp_key_univ).`enc
    (x.`ke_rsp1_pt1, x.`ke_rsp1_k)).
proof.
rewrite /is_valid.
move => val_m.
have [] x : exists (x : ke_rsp1), epdp_ke_rsp1_msg.`dec m = Some x.
  exists (oget (dec_ke_rsp1 m)); by rewrite -some_oget.
case x => x1 x2 x3 x4.
move => /(epdp_dec_enc _ _ _ valid_epdp_ke_rsp1_msg) <-.
by rewrite !epdp.
qed.

end UC_KEDirPt2.

theory UC_KEDir.  (* composite direct interface *)

clone UC_KEDirPt1 as Pt1 with
  op pi = 1
proof *.

clone UC_KEDirPt2 as Pt2 with
  op pi = 2
proof *.

end UC_KEDir.

(* TODO - start here! *)

(* state for Party 1 *)

type ke_real_p1_state = [
    KERealP1StateWaitReq1
  | KERealP1StateWaitFw2 of port & exp
  | KERealP1StateFinal
].

(* state for Party 2 *)

type ke_real_p2_state = [
    KERealP2StateWaitFw1
  | KERealP2StateWaitReq2 of port & exp
  | KERealP2StateFinal
].

module KEReal : FUNC = {
  var self, adv : addr
  var st1 : ke_real_p1_state
  var st2 : ke_real_p2_state

  (* Party 1 (P1) manages ports (self, 1) and (self, 3);
     (self, 1) is external, (self, 3) is internal

     Party 2 (P2) manages ports (self, 2) and (self, 4);
     (self, 2) is external, (self, 4) is internal

     First forwarder (Fw1) is at address self ++ [1]
     Second forwarder (Fw2) is at address self ++ [2] *)

  proc init(self_ adv_ : addr) : unit = {
    self <- self_; adv <- adv_;
    Fw1.Forw.init(self ++ [1], adv); Fw2.Forw.init(self ++ [2], adv);
    st1 <- KERealP1StateWaitReq1; st2 <- KERealP2StateWaitFw1;
  }

  proc party1(m : msg) : msg option = {
    var q1 : exp; var k2 : key;
    var r : msg option <- None;
    match st1 with
      KERealP1StateWaitReq1 => {
        match dec_ke_req1 m with
          Some x => {
            (* destination of m is (self, 1) *)
            if (! self <= x.`ke_req1_pt2.`1 /\ ! adv <= x.`ke_req1_pt2.`1) {
              q1 <$ dexp;
              r <-
                Some
                (Fw1.fw_req
                 {|Fw1.fw_req_func = (self ++ [1]);
                   Fw1.fw_req_pt1  = (self, 3);
                   Fw1.fw_req_pt2  = (self, 4);
                   Fw1.fw_req_u    =
                     EPDP_Univ_PortPortKey.enc
                     (x.`ke_req1_pt1, x.`ke_req1_pt2, g ^ q1)|});
              st1 <- KERealP1StateWaitFw2 x.`ke_req1_pt1 q1;
            }
          }
        | None   => { }
        end;
      }
    | KERealP1StateWaitFw2 pt1 q1 => {
        match Fw2.dec_fw_rsp m with
          Some x => {
              if (x.`Fw2.fw_rsp_pt2 = (self, 3)) {
                (* destination of m is (self, 3) *)
                k2 <- oget (EPDP_Univ_Key.dec x.`Fw2.fw_rsp_u);
                r <-
                  Some
                  (ke_rsp2
                   ({|ke_rsp2_func = self; ke_rsp2_pt1 = pt1;
                      ke_rsp2_key  = (k2 ^ q1)|}));
                st1 <- KERealP1StateFinal;
              }
          }
        | None   => { }
        end;
      }
    | KERealP1StateFinal => { }
    end;
    return r;
  }

  proc party2(m : msg) : msg option = {
    var pt1, pt2 : port; var q2 : exp; var k1 : key;
    var r : msg option <- None;
    match st2 with
      KERealP2StateWaitFw1 => {
        match Fw1.dec_fw_rsp m with
          Some x => {
              if (x.`Fw1.fw_rsp_pt2 = (self, 4)) {
                (* destination of m is (self, 4) *)
                (pt1, pt2, k1) <-
                  oget (EPDP_Univ_PortPortKey.dec x.`Fw1.fw_rsp_u);
                q2 <$ dexp;
                r <-
                  Some
                  (ke_rsp1
                   ({|ke_rsp1_func = self; ke_rsp1_pt1 = pt1;
                      ke_rsp1_pt2 = pt2; ke_rsp1_key = k1 ^ q2|}));
                st2 <- KERealP2StateWaitReq2 pt2 q2;
              }
          }
        | None   => { }
        end;
      }
    | KERealP2StateWaitReq2 pt2 q2 => {
        match dec_ke_req2 m with
          Some x => {
            (* destination of m is (self, 2) *)
            if (x.`ke_req2_pt2 = pt2) {
              r <-
                Some
                (Fw2.fw_req
                 {|Fw2.fw_req_func = (self ++ [2]);
                   Fw2.fw_req_pt1  = (self, 4);
                   Fw2.fw_req_pt2  = (self, 3);
                   Fw2.fw_req_u    = EPDP_Univ_Key.enc (g ^ q2)|});
              st2 <- KERealP2StateFinal;
            }
          }
        | None   => { }
        end;
      }
    | KERealP2StateFinal => { }
    end;
    return r;
  }

  proc loop(m : msg) : msg option = {
    var r : msg option <- None;
    var not_done : bool <- true;

    (* if the parties and sub-functionalities are well-behaved,
       this loop invariant holds:

         not_done =>
         m.`1 = Dir /\ m.`2.`1 = self /\
         (m.`2.`2 = 1 \/ m.`2.`2 = 2 \/ m.`2.`2 = 3 \/ m.`2.`2 = 4) \/
         self ++ [1] <= m.`2.`1 \/
         self ++ [2] <= m.`2.`1

       we guard the calls to the parties and sub-functionalities so
       that we can do some proofs treating them as black boxes *)

    while (not_done) {
      if (m.`2.`1 = self /\ (m.`2.`2 = 1 \/ m.`2.`2 = 3)) {
        r <@ party1(m);
        r <- opt_msg_guard (fun mod _ _ _ _ _ => mod <> Adv) r;
      }
      elif (m.`2.`1 = self /\ (m.`2.`2 = 2 \/ m.`2.`2 = 4)) {
        r <@ party2(m);
        r <- opt_msg_guard (fun mod _ _ _ _ _ => mod <> Adv) r;
      }
      elif (self ++ [1] <= m.`2.`1) {
        r <@ Fw1.Forw.invoke(m);
        r <-
          opt_msg_guard
          (fun mod _ n1 _ _ _ => mod = Adv => n1 = adv_fw1_pi) r;
      }
      elif (self ++ [2] <= m.`2.`1) {
        r <@ Fw2.Forw.invoke(m);
        r <-
          opt_msg_guard
          (fun mod _ n1 _ _ _ => mod = Adv => n1 = adv_fw2_pi) r;
      }
      else {
        (* can't happen, assuming parties and sub-functionalities
           are well behaved *)
        r <- None;
      }

      if (r = None \/ ! self <= (oget r).`2.`1) {
        not_done <- false;
      }
      else {
        m <- oget r;
      }
    }
    return r;
  }

  proc invoke(m : msg) : msg option = {
    var r : msg option <- None;
    (* we can assume m.`3.`1 is not >= self and not >= adv *)
    if ((m.`1 = Dir /\ m.`2.`1 = self /\
         (m.`2.`2 = 1 \/ m.`2.`2 = 2)) \/
        (m.`1 = Adv /\
         (self ++ [1] <= m.`2.`1 \/ self ++ [2] <= m.`2.`1))) {
      r <@ loop(m);
    }
    return r;
  }
}.
