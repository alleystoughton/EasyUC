(* Forwarding_Code.eca *)

(* Model for the machine-generated code for the Forwarding ideal
   functionality *)

require import AllCore List UCBasicTypes.

(* begin theory parameters *)

(* port index of adversary that functionality communicates with *)

op _adv_pi : int.

axiom fwd_pi_uniq : uniq [_adv_pi; 0].

(* end theory parameters *)

(* basic direct interface for the single party, with port index 1 *)

theory FwDir_.

(* input message: request sent to port index 1 of forwarding
   functionality: pt1 is asking to forward u to pt2

   pt1, pt2 and u are the names used in the UC DSL declaratation of
   fw_req; note the extra "_" in fw_req__func, to avoid a possible
   conflict with legal UC DSL identifers *)

type fw_req =
  {fw_req__func : addr;   (* address of functionality - destination address *)
   fw_req_pt1   : port;   (* port requesting forwarding - source address *)
   (* data: *)
   fw_req_pt2   : port;   (* port being forwarded to *)
   fw_req_u     : univ}.  (* universe value to be forwarded *)

op enc_fw_req (x : fw_req) : msg =
  (Dir, (x.`fw_req__func, 1), x.`fw_req_pt1,
   0,  (* no messages from which this must be distinct *)
   (epdp_pair_univ epdp_port_univ epdp_id).`enc
    (x.`fw_req_pt2, x.`fw_req_u)).

op nosmt dec_fw_req (m : msg) : fw_req option =
  let (mod, pt1, pt2, tag, v) = m
  in (mod = Adv \/ pt1.`2 <> 1 \/ tag <> 0) ?
     None :
     match (epdp_pair_univ epdp_port_univ epdp_id).`dec v with
     | None   => None
     | Some p =>
         let (pt2', u) = p
         in Some
            {|fw_req__func = pt1.`1; fw_req_pt1 = pt2;
              fw_req_pt2 = pt2'; fw_req_u = u|}
     end.

op epdp_fw_req_msg = {|enc = enc_fw_req; dec = dec_fw_req|}.

lemma valid_epdp_fw_req_msg : valid_epdp epdp_fw_req_msg.
proof.
apply epdp_intro.
move => x.
rewrite /epdp_fw_req_msg /= /dec_fw_req /enc_fw_req /=
        !(epdp, epdp_sub) /=.
by case x.
move => [mod pt1 pt2 tag u] v.
rewrite /epdp_fw_req_msg /dec_fw_req /enc_fw_req /=.
case (mod = Adv \/ pt1.`2 <> 1 \/ tag <> 0) => //.
rewrite !negb_or /= not_adv => [#] -> pt1_2 -> match_eq_some /=.
have val_u :
  (epdp_pair_univ epdp_port_univ epdp_id).`dec u =
  Some (v.`fw_req_pt2, v.`fw_req_u).
  move : match_eq_some.
  case ((epdp_pair_univ epdp_port_univ epdp_id).`dec u) => //.
  by case.
move : match_eq_some.
rewrite val_u /= => <- /=.
split; first move : pt1_2; by case pt1.
by rewrite (epdp_dec_enc _ _ u) 1:!epdp_sub.
qed.

hint simplify [eqtrue] valid_epdp_fw_req_msg.
hint rewrite epdp : valid_epdp_fw_req_msg.

lemma eq_of_valid_fw_req (m : msg) :
  is_valid epdp_fw_req_msg m =>
  m =
  let x = oget (epdp_fw_req_msg.`dec m) in
  (Dir,
   (x.`fw_req__func, 1),
   x.`fw_req_pt1,
   0,
   (epdp_pair_univ epdp_port_univ epdp_id).`enc
    (x.`fw_req_pt2, x.`fw_req_u)).
proof.
rewrite /is_valid.
move => val_m.
have [] x : exists (x : fw_req), epdp_fw_req_msg.`dec m = Some x.
  exists (oget (dec_fw_req m)); by rewrite -some_oget.
case x => x1 x2 x3 x4.
move => /(epdp_dec_enc _ _ _ valid_epdp_fw_req_msg) <-.
by rewrite !epdp.
qed.

(* output message: response sent from port index 1 of forwarding
   functionality to pt2, completing the forwarding of u that was
   requested by pt1

   pt2, pt1 and u are the names specified in the UC DSL declaration
   of fw_rsp; note the extra "_" in fw_rsp__func, to avoid a possible
   conflict with legal UC DSL identifers *)

type fw_rsp =
  {fw_rsp__func : addr;   (* address of functionality - source address *)
   fw_rsp_pt2   : port;   (* port being forwarded to - destination address *)
   (* data: *)
   fw_rsp_pt1   : port;   (* port requesting forwarding *)
   fw_rsp_u     : univ}.  (* universe value to be forwarded *)

op enc_fw_rsp (x : fw_rsp) : msg =
  (Dir, x.`fw_rsp_pt2, (x.`fw_rsp__func, 1),
   0,  (* no messages from which this must be distinct *)
   (epdp_pair_univ epdp_port_univ epdp_id).`enc (x.`fw_rsp_pt1, x.`fw_rsp_u)).

op nosmt dec_fw_rsp (m : msg) : fw_rsp option =
  let (mod, pt1, pt2, tag, v) = m
  in (mod = Adv \/ pt2.`2 <> 1 \/ tag <> 0) ?
     None :
     match (epdp_pair_univ epdp_port_univ epdp_id).`dec v with
     | None   => None
     | Some p =>
         let (pt1', u) = p
         in Some
            {|fw_rsp__func = pt2.`1; fw_rsp_pt1 = pt1';
              fw_rsp_pt2 = pt1; fw_rsp_u = u|}
     end.

op epdp_fw_rsp_msg = {|enc = enc_fw_rsp; dec = dec_fw_rsp|}.

lemma valid_epdp_fw_rsp_msg : valid_epdp epdp_fw_rsp_msg.
proof.
apply epdp_intro.
move => x.
rewrite /epdp_fw_rsp_msg /= /dec_fw_rsp /enc_fw_rsp /=
        !(epdp, epdp_sub) /=.
by case x.
move => [mod pt1 pt2 tag u] v.
rewrite /epdp_fw_rsp_msg /dec_fw_rsp /enc_fw_rsp /=.
case (mod = Adv \/ pt2.`2 <> 1 \/ tag <> 0) => //.
rewrite !negb_or /= not_adv => [#] -> pt2_2 -> match_eq_some /=.
have val_u :
  (epdp_pair_univ epdp_port_univ epdp_id).`dec u =
  Some (v.`fw_rsp_pt1, v.`fw_rsp_u).
  move : match_eq_some.
  case ((epdp_pair_univ epdp_port_univ epdp_id).`dec u) => //.
  by case.
move : match_eq_some.
rewrite val_u /= => <- /=.
split; first move : pt2_2; by case pt2.
by rewrite (epdp_dec_enc _ _ u) 1:!epdp_sub.
qed.

hint simplify [eqtrue] valid_epdp_fw_rsp_msg.
hint rewrite epdp : valid_epdp_fw_rsp_msg.

lemma eq_of_valid_fw_rsp (m : msg) :
  is_valid epdp_fw_rsp_msg m =>
  m =
  let x = oget (epdp_fw_rsp_msg.`dec m) in
  (Dir,
   x.`fw_rsp_pt2,
   (x.`fw_rsp__func, 1),
   0,
   (epdp_pair_univ epdp_port_univ epdp_id).`enc
    (x.`fw_rsp_pt1, x.`fw_rsp_u)).
proof.
rewrite /is_valid.
move => val_m.
have [] x : exists (x : fw_rsp), epdp_fw_rsp_msg.`dec m = Some x.
  exists (oget (dec_fw_rsp m)); by rewrite -some_oget.
case x => x1 x2 x3 x4.
move => /(epdp_dec_enc _ _ _ valid_epdp_fw_rsp_msg) <-.
by rewrite !epdp.
qed.

end FwDir_.

theory FwDir.  (* composite direct interface *)

clone FwDir_ as D.

end FwDir.

(* basic adversarial interface, with port index 2 (number of parties +
   1) *)

theory FwAdv.

(* message from forwarding functionality to adversary, letting it
   observe that the functionality is proposing to forward u to
   pt2 on behalf of pt1

   pt1, pt2 and u are the identifiers occurring in the UC DSL
   declaration of fw_obs; not the extra "_"s in fw_obs__func and
   fw_obs__adv, to avoid conflict with legal UC DSL identifiers *)

type fw_obs =
  {fw_obs__func : addr;   (* address of functionality - source address *)
   fw_obs__adv  : addr;   (* address of adversary - destination address *)
   (* data: *)
   fw_obs_pt1   : port;   (* port requesting forwarding *)
   fw_obs_pt2   : port;   (* port being forwarded to *)
   fw_obs_u     : univ}.  (* universe value to be forwarded *)

op enc_fw_obs (x : fw_obs) : msg =
  (Adv, (x.`fw_obs__adv, _adv_pi), (x.`fw_obs__func, 2),
   0,  (* no messages from which this must be distinct *)
   (epdp_triple_univ epdp_port_univ epdp_port_univ epdp_id).`enc
    (x.`fw_obs_pt1, x.`fw_obs_pt2, x.`fw_obs_u)).

op nosmt dec_fw_obs (m : msg) : fw_obs option =
  let (mod, pt1, pt2, tag, v) = m
  in (mod = Dir \/ pt1.`2 <> _adv_pi \/ pt2.`2 <> 2 \/ tag <> 0) ?
     None :
     match (epdp_triple_univ epdp_port_univ epdp_port_univ
            epdp_id).`dec v with
     | None   => None
     | Some t =>
         let (pt1', pt2', u) = t
         in Some
            {|fw_obs__func = pt2.`1; fw_obs__adv = pt1.`1;
              fw_obs_pt1 = pt1'; fw_obs_pt2 = pt2'; fw_obs_u = u|}
     end.

op epdp_fw_obs_msg = {|enc = enc_fw_obs; dec = dec_fw_obs|}.

lemma valid_epdp_fw_obs_msg : valid_epdp epdp_fw_obs_msg.
proof.
apply epdp_intro.
move => x.
rewrite /epdp_fw_obs_msg /= /dec_fw_obs /enc_fw_obs /=
        !(epdp, epdp_sub) /=.
by case x.
move => [mod pt1 pt2 tag u] v.
rewrite /epdp_fw_obs_msg /dec_fw_obs /enc_fw_obs /=.
case (mod = Dir \/ pt1.`2 <> _adv_pi \/ pt2.`2 <> 2 \/ tag <> 0) => //.
rewrite !negb_or /= not_dir => [#] -> pt1_2 pt2_2 -> match_eq_some /=.
have val_u :
  (epdp_triple_univ epdp_port_univ epdp_port_univ epdp_id).`dec u =
  Some (v.`fw_obs_pt1, v.`fw_obs_pt2, v.`fw_obs_u).
  move : match_eq_some.
  case ((epdp_triple_univ epdp_port_univ epdp_port_univ epdp_id).`dec u) => //.
  by case.
move : match_eq_some.
rewrite val_u /= => <- /=.
split; first move : pt1_2; by case pt1.
split; first move : pt2_2; by case pt2.
by rewrite (epdp_dec_enc _ _ u) 1:!epdp_sub.
qed.

hint simplify [eqtrue] valid_epdp_fw_obs_msg.
hint rewrite epdp : valid_epdp_fw_obs_msg.

lemma eq_of_valid_fw_obs (m : msg) :
  is_valid epdp_fw_obs_msg m =>
  m =
  let x = oget (epdp_fw_obs_msg.`dec m) in
  (Adv,
   (x.`fw_obs__adv, _adv_pi),
   (x.`fw_obs__func, 2),
   0,
   (epdp_triple_univ epdp_port_univ epdp_port_univ epdp_id).`enc
    (x.`fw_obs_pt1, x.`fw_obs_pt2, x.`fw_obs_u)).
proof.
rewrite /is_valid.
move => val_m.
have [] x : exists (x : fw_obs), epdp_fw_obs_msg.`dec m = Some x.
  exists (oget (dec_fw_obs m)); by rewrite -some_oget.
case x => x1 x2 x3 x4 x5.
move => /(epdp_dec_enc _ _ _ valid_epdp_fw_obs_msg) <-.
by rewrite !epdp.
qed.

(* message from adversary telling forwarding functionality it may
   proceed with forwarding

   compare with the UC DSL declaration of fw_ok, which has no
   arguments; note the extra "_"s in fw_ok__func and fw_ok__adv, to
   avoid legal UC DSL identifers *)

type fw_ok =
  {fw_ok__func : addr;  (* address of functionality - destination address *)
   fw_ok__adv  : addr   (* address of adversary - source address *)
   (* data: (none) *)
  }.

op enc_fw_ok (x : fw_ok) : msg =
  (Adv, (x.`fw_ok__func, 2), (x.`fw_ok__adv, _adv_pi),
   0,  (* no messages from which this must be distinct *)
   epdp_unit_univ.`enc ()).

op nosmt dec_fw_ok (m : msg) : fw_ok option =
  let (mod, pt1, pt2, tag, v) = m
  in (mod = Dir \/ pt1.`2 <> 2 \/ pt2.`2 <> _adv_pi \/ tag <> 0) ?
     None :
     match epdp_unit_univ.`dec v with
     | None   => None
     | Some _ => Some {|fw_ok__func = pt1.`1; fw_ok__adv = pt2.`1|}
     end.

op epdp_fw_ok_msg = {|enc = enc_fw_ok; dec = dec_fw_ok|}.

lemma valid_epdp_fw_ok_msg : valid_epdp epdp_fw_ok_msg.
proof.
apply epdp_intro.
move => x.
rewrite /epdp_fw_ok_msg /= /dec_fw_ok /enc_fw_ok /=
        !(epdp, epdp_sub) /=.
by case x.
move => [mod pt1 pt2 tag u] v.
rewrite /epdp_fw_ok_msg /dec_fw_ok /enc_fw_ok /=.
case (mod = Dir \/ pt1.`2 <> 2 \/ pt2.`2 <> _adv_pi \/ tag <> 0) => //.
rewrite !negb_or /= not_dir => [#] -> pt1_2 pt2_2 -> match_eq_some /=.
have val_u : epdp_unit_univ.`dec u = Some ().
  move : match_eq_some.
  case (epdp_unit_univ.`dec u) => //.
move : match_eq_some.
rewrite val_u /= => <- /=.
split; first move : pt1_2; by case pt1.
split; first move : pt2_2; by case pt2.
by rewrite (epdp_dec_enc _ _ u).
qed.

hint simplify [eqtrue] valid_epdp_fw_ok_msg.
hint rewrite epdp : valid_epdp_fw_ok_msg.

lemma eq_of_valid_fw_ok (m : msg) :
  is_valid epdp_fw_ok_msg m =>
  m =
  let x = oget (epdp_fw_ok_msg.`dec m) in
  (Adv,
   (x.`fw_ok__func, 2),
   (x.`fw_ok__adv, _adv_pi),
   0,
   epdp_unit_univ.`enc ()).
proof.
rewrite /is_valid.
move => val_m.
have [] x : exists (x : fw_ok), epdp_fw_ok_msg.`dec m = Some x.
  exists (oget (dec_fw_ok m)); by rewrite -some_oget.
case x => x1 x2.
move => /(epdp_dec_enc _ _ _ valid_epdp_fw_ok_msg) <-.
by rewrite !epdp.
qed.

end FwAdv.

type _fw_state = [
  | _FwStateInit
  | _FwStateWait of port & port & univ
  | _FwStateFinal
].

module Forw = {  (* has module type UCCore.FUNC - but not in scope *)
  var _self, _adv : addr
  var _st : _fw_state

  proc init(self_ adv_ : addr) : unit = {
    _self <- self_; _adv <- adv_; _st <- _FwStateInit;
  }

  (* we insert sufficient checks for target and source addresses
     of sent messages to be valid; depending upon the invariants
     maintained, some of them will be redundant *)

  proc parties(_m : msg) : msg option = {
    var _r : msg option <- None;
    match _st with
      _FwStateInit => {
        match FwDir.D.epdp_fw_req_msg.`dec _m with
          Some x => {
            (* x.`FwDir.D.fw_req__func = _self /\
               envport _self _adv x.`FwDir.D.fw_req_pt1 *)
            if (envport _self _adv x.`FwDir.D.fw_req_pt2) {
              _r <-
                Some
                (FwAdv.epdp_fw_obs_msg.`enc     (* adversarial message *)
                 {|FwAdv.fw_obs__func = _self;  (* source address *)
                   FwAdv.fw_obs__adv  = _adv;   (* destination address *)
                   (* data: *)
                   FwAdv.fw_obs_pt1   = x.`FwDir.D.fw_req_pt1;
                   FwAdv.fw_obs_pt2   = x.`FwDir.D.fw_req_pt2;
                   FwAdv.fw_obs_u     = x.`FwDir.D.fw_req_u|});
              _st <-
                _FwStateWait x.`FwDir.D.fw_req_pt1 x.`FwDir.D.fw_req_pt2
                x.`FwDir.D.fw_req_u;
            }
          }
        | None => { }
        end;
      }
    | _FwStateWait pt1 pt2 u => {
        match FwAdv.epdp_fw_ok_msg.`dec _m with
          Some x => {
            (* x.`FwAdv.fw_ok__func = self /\ x.`FwAdv.fw_ok__adv = adv;
               if the invariant from FwInitState is preserved, the
               following test is redudant: *)
            if (envport _self _adv pt2) {
              _r <-
                Some
                (FwDir.D.epdp_fw_rsp_msg.`enc     (* direct message *)
                 {|FwDir.D.fw_rsp__func = _self;  (* source address *)
                   FwDir.D.fw_rsp_pt2   = pt2;    (* destination address *)
                   (* data: *)
                   FwDir.D.fw_rsp_pt1   = pt1;
                   FwDir.D.fw_rsp_u     = u|});
              _st <- _FwStateFinal;
            }
          }
        | None => { }
        end;
      }
    | _FwStateFinal => { }
    end;
    return _r;
  }

  proc invoke(m : msg) : msg option = {
    var r : msg option <- None;
    if ((m.`1 = Dir /\ m.`2.`1 = _self /\ m.`2.`2 = 1 /\
         envport _self _adv m.`3) \/
        (m.`1 = Adv /\ m.`2.`1 = _self /\ m.`2.`2 = 2 /\
         m.`3.`1 = _adv)) {
      r <@ parties(m);
    }
    return r;
  }
}.
